{"version":3,"sources":["component/sidebar.tsx","component/topbar.tsx","page/home.tsx","component/login.tsx","page/login.tsx","component/input.tsx","component/setup.tsx","page/setup.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Sidebar","console","log","to","icon","text","activeClassName","className","id","pull","this","Button","faHome","Descriptor","faUser","faFileMedicalAlt","faMapMarked","faToolbox","faAddressCard","faTachometerAlt","faShieldAlt","faTools","faCogs","faUsers","faFileUpload","faServer","Component","routeNames","Topbar","pageTitle","window","location","hash","document","title","getLocation","HomePage","Login","event","preventDefault","onSubmit","submitForm","type","placeholder","value","LoginPage","Input","props","label","toUpperCase","required","maxlength","undefined","errorClass","error","onChange","change","spellCheck","maxLength","Setup","state","usernameValue","usernameError","passwordValue","passwordError","srvPathValue","srvPathError","insPathValue","insPathError","dbServerValue","dbServerError","dbNameValue","dbUserValue","dbPassValue","checkInput","bind","length","setState","match","key","e","updateValue","target","SetupPage","App","path","component","Boolean","hostname","ReactDOM","render","basename","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a996417a.chunk.js","sourcesContent":["import React, { Component } from 'react'; // let's also import Component\nimport { NavLink } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTachometerAlt, faCogs, faTools, faServer, faHome, faUser, faFileMedicalAlt, faToolbox, faMapMarked, faAddressCard, faShieldAlt, faUsers, faFileUpload } from '@fortawesome/free-solid-svg-icons'\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\n\nexport class Sidebar extends Component<{}> {\n\n  componentDidMount() {\n    console.log(\"Sidebar mounted\")\n  }\n\n  Button(to: string , icon: IconProp, text: string) {\n    return <NavLink activeClassName='active' className='link sidebar-button' to={to}>\n      <button className='inner'>{text}<FontAwesomeIcon id='icon'icon={icon} pull='right' /></button>\n      </NavLink>;\n  }\n\n  Descriptor(text: string) {\n    return <div className='descriptor'>\n      <p>\n        {text}\n      </p>\n    </div>\n  }\n\n  render() {\n    return (\n        <div id='sidebar-container'>\n            <div id='sidebar-top-container'>\n              <h2>Ifrit</h2>\n            </div>\n            <div id='sidebar-button-container'>\n            {this.Button('/app/home', faHome, 'Home')}\n            {this.Descriptor('General')}\n            {this.Button('/app/account', faUser, 'Account')}\n            {this.Button('/app/logs', faFileMedicalAlt, 'Logs')}\n            {this.Button('/app/missions', faMapMarked, 'Missions')}\n            {this.Button('/app/addons', faToolbox, 'Addons')}\n            {this.Button('/app/profiles', faAddressCard, 'Profiles')}\n            {this.Descriptor('Instance Management ')}\n            {this.Button('/app/instance/dashboard', faTachometerAlt, 'Dashboard')}\n            {this.Button('/app/instance/security', faShieldAlt, 'Security')}\n            {this.Button('/app/instance/addons', faTools, 'Addons')}\n            {this.Button('/app/instance/configuration', faCogs, 'Configuration')}\n            {this.Descriptor('Panel Management ')}\n            {this.Button('/app/panel/users', faUsers, 'Users')}\n            {this.Button('/app/panel/sftp', faFileUpload, 'SFTP Settings')}\n            {this.Button('/app/panel/server', faServer, 'Server Settings')}\n            </div>\n        </div>\n    )\n  }\n}\n","import React, { Component } from 'react'; \n\ntype routeNamesType = {\n    [name: string] : string\n};\n\nconst routeNames : routeNamesType = {\n    \"#/app/home\" : \"Home\",\n    \"#/app/account\" : \"Account\",\n    \"#/app/logs\" : \"Logs\",\n    \"#/app/missions\" : \"Missions\",\n    \"#/app/addons\" : \"Addons\",\n    \"#/app/profiles\" : \"Profiles\",\n    \"#/app/instance/dashboard\": \"Dashboard\",\n    \"#/app/instance/security\": \"Security\",\n    \"#/app/instance/addons\": \"Addons\",\n    \"#/app/instance/configuration\": \"Configuration\",\n    \"#/app/panel/users\" : \"Users\",\n    \"#/app/panel/sftp\": \"SFTP Settings\",\n    \"#/app/panel/server\" : \"Server Settings\"\n}\n\n\nexport class Topbar extends Component<{}> {\n  componentDidMount() {\n    console.log(\"Topbar mounted\")\n  }\n\n  getLocation() {\n      let pageTitle = routeNames[window.location.hash];\n      document.title = 'Ifrit - ' + pageTitle;\n      return pageTitle;\n  }\n\n  render() {\n    return (\n        <div id='topbar-container'>\n            <div id='topbar-inner-container'>\n                <div id='page-title'>\n                    <span>{this.getLocation()}</span>\n                </div>\n            </div>\n        </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\n\nexport class HomePage extends Component<{}> {\n\n  componentDidMount() {\n    console.log(\"Home page mounted\")\n  }\n\n  render() {\n    return (\n        <div id='body-outer-container'>\n            <div id='body-inner'>\n              Home!\n            </div>\n        </div>\n    )\n  }\n}\n","import React, { Component, FormEvent } from 'react';\n\nexport class Login extends Component<{}> {\n\n  componentDidMount() {\n    console.log(\"Login mounted\")\n  }\n\n\n  submitForm(event: FormEvent) {\n      console.log('Submitted form!')\n      event.preventDefault()\n  }\n\n  render() {\n    return (\n        <div id='login-container'>\n            <div id='login-inner'>\n              <h2 className='center-text'>Sign in</h2>\n              <form id='form' onSubmit={this.submitForm}>\n                <input className='input-field' type='text' placeholder='Username'/><br></br>\n                <input className='input-field' type='password' placeholder='Password'/><br></br>\n                <input id='submit-button' type='submit' value='Next'/>\n              </form>\n            </div>\n        </div>\n    )\n  }\n}","import React, { Component } from 'react';\n\nimport { Login } from '../component/login';\n\n\nexport class LoginPage extends Component<{}> {\n\n  componentDidMount() {\n    console.log(\"Login page mounted\")\n  }\n\n  render() {\n    return (\n        <div id='singlepage-container'>\n            <div id='singlepage-inner'>\n              <Login/>\n            </div>\n        </div>\n    )\n  }\n}","import React, { Component } from 'react';\n\ntype InputProps = {\n    label: string,\n    value: any,\n    change: any,\n    required?: boolean,\n    maxlength?: number,\n    type: string,\n    error?: string\n}\n\nexport class Input extends Component<InputProps> {\n    constructor(props: InputProps) {\n        super(props);\n      }\n\n\n  render() {\n    const label = this.props.label.toUpperCase();\n    const required = (this.props.required) ? '*' : '';\n    const maxlength =  (this.props.maxlength !== undefined) ? this.props.maxlength : -1;\n    const errorClass = (this.props.error !== undefined) ? 'error' : '';\n    return (\n        <div id='input-container'>\n            <label>{label}</label>\n            <span>{required}</span>\n              <input id='input-inner' type={this.props.type} value={this.props.value} className={errorClass} onChange={this.props.change} spellCheck={false} maxLength={maxlength}/>\n            <span>{this.props.error}</span>\n        </div>\n    )\n  }\n}","import React, { Component, FormEvent } from 'react';\n\nimport { Input } from './input';\n\ninterface SetupState {\n  [name: string] : string\n}\n\nexport class Setup extends Component<SetupState, any> {\n  constructor(props : {}) {\n    super(props)\n    this.state = {\n      usernameValue: '',\n      usernameError: undefined,\n      passwordValue: '',\n      passwordError: undefined,\n      srvPathValue: '/srv/arma3',\n      srvPathError: undefined,\n      insPathValue: '/srv/arma3/instances',\n      insPathError: undefined,\n      dbServerValue: '127.0.0.1:5432',\n      dbServerError: undefined,\n      dbNameValue: 'ifrit',\n      dbUserValue: 'ifrituser',\n      dbPassValue: ''\n\n    }\n    this.checkInput = this.checkInput.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n  }\n\n\n  componentDidMount() {\n    console.log(\"Setup mounted\")\n  }\n\n  checkInput() {\n    if (this.state.usernameValue.length > 20) {\n      this.setState({usernameError : 'Username can not be more than 20 characters long.'})\n    } else if (this.state.usernameValue.length < 3) {\n      this.setState({usernameError : 'Username must be at least 3 characters long.'})\n    } else if (!this.state.usernameValue.match(/^[a-zA-Z0-9]+$/)) {\n      this.setState({usernameError : 'Username contains invalid characters or spaces.'})\n    } else {\n      this.setState({usernameError : undefined})\n    }\n\n    if (this.state.passwordValue.length < 5) {\n      this.setState({passwordError : 'Password must be more than 5 characters.'})\n    } else {\n      this.setState({passwordError : undefined})\n    }\n\n    \n  }\n\n  submitForm(event: FormEvent) {\n      event.preventDefault();\n      this.checkInput();\n  }\n\n  updateValue(key : string, value ?: any) {\n    this.setState({\n      [key] : value\n    })\n  }\n\n  render() {\n    return (\n        <div id='login-container'>\n            <div id='login-inner'>\n              <h2 className='center-text'>Setup Ifrit</h2>\n              <form id='form' onSubmit={this.submitForm}>\n                <h4 className='center-text'>Admin Account</h4>\n                <Input label='Username' value={this.state.usernameValue} change={(e : any) => this.updateValue('usernameValue', e.target.value)} required={true} maxlength={20} type='text' error={this.state.usernameError}/>\n                <Input label='Password' value={this.state.passwordValue} change={(e : any) => this.updateValue('passwordValue', e.target.value)} required={true} type='password' error={this.state.passwordError}/>\n                <h4 className='center-text'>Arma Server</h4>\n                <Input label='Server directory path' value={this.state.srvPathValue} change={(e : any) => this.updateValue('srvPathValue', e.target.value)} required={true} type='text' error={this.state.srvPathError}/>\n                <Input label='Instance directory path' value={this.state.insPathValue} change={(e : any) => this.updateValue('insPathValue', e.target.value)} required={true} type='text' error={this.state.insPathError}/>\n                <h4 className='center-text'>Database</h4>\n                <p className='center-text'>Ifrit currently only supports PostgreSQL.</p>\n                <Input label='Server IP/HOSTNAME' value={this.state.dbServerValue} change={(e : any) => this.updateValue('dbServerValue', e.target.value)} required={true} type='text' error={this.state.dbServerError}/>\n                <Input label='Database name' value={this.state.dbNameValue} change={(e : any) => this.updateValue('dbNameValue', e.target.value)} required={true} type='text'/>\n                <Input label='Username' value={this.state.dbUserValue} change={(e : any) => this.updateValue('dbUserValue', e.target.value)} required={true} type='text'/>\n                <Input label='Password' value={this.state.dbPassValue} change={(e : any) => this.updateValue('dbPassValue', e.target.value)} required={true} type='password'/>\n                <input id='submit-button' type='submit' value='Next'/>\n              </form>\n            </div>\n        </div>\n    )\n  }\n}","import React, { Component } from 'react';\n\nimport { Setup } from '../component/setup';\n\n\nexport class SetupPage extends Component<{}> {\n\n  componentDidMount() {\n    console.log(\"Login page mounted\")\n  }\n\n  render() {\n    return (\n        <div id='singlepage-container'>\n            <div id='singlepage-inner' className='fullheight'>\n              <Setup/>\n            </div>\n        </div>\n    )\n  }\n}","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport { Sidebar } from './component/sidebar';\nimport { Topbar } from './component/topbar';\nimport { HomePage } from './page/home';\nimport { LoginPage } from './page/login';\nimport { SetupPage } from './page/setup';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path='/login' component={LoginPage}/>\n      <Route path='/setup' component={SetupPage}/>\n      <Route path='/app/' component={Sidebar}/>\n      <div id='middle-container'>\n        <Route path='/app/' component={Topbar}/>\n        <Route path='/app/home' component={HomePage}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './style/app.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter basename=\"/\">\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}